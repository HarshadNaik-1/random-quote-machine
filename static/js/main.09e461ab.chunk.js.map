{"version":3,"sources":["components/Quote.js","components/QuoteMachine.js","App.js","serviceWorker.js","index.js"],"names":["refreshPage","setTimeout","window","location","reload","randomNum","Math","floor","random","randomColor","toString","Quote","useState","quote","setQuote","author","setAuthor","useEffect","a","fetch","res","json","data","text","document","body","style","backgroundColor","effect","color","transition","textAlign","paddingLeft","className","onClick","fontSize","icon","faQuoteLeft","QuoteMachine","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yWAKMA,G,MAAc,WAClBC,YAAW,WACTC,OAAOC,SAASC,QAAO,KACtB,OAGCC,EAAYC,KAAKC,MAAsB,KAAhBD,KAAKE,SAAkB,GAC9CC,EAAc,IAAMH,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBE,SAAS,IA+CzDC,EA7CD,WAAO,IAAD,EACQC,mBAAS,MADjB,mBACXC,EADW,KACJC,EADI,OAEUF,mBAAS,MAFnB,mBAEXG,EAFW,KAEHC,EAFG,KAalB,OAVAC,qBAAU,YACI,uCAAG,8BAAAC,EAAA,sEACKC,MATZ,+BAQO,cACPC,EADO,gBAEMA,EAAIC,OAFV,OAEPC,EAFO,OAGbR,EAASQ,EAAKjB,GAAWkB,MACzBP,EAAUM,EAAKjB,GAAWU,QAC1BS,SAASC,KAAKC,MAAMC,gBAAkBlB,EALzB,2CAAH,qDAOZmB,MAEGf,GAAUE,EAab,6BACE,wBAAIW,MAAO,CAAEG,MAAOpB,EAAaqB,WAAY,YAAcjB,GAC3D,uBACEa,MAAO,CAAEG,MAAOpB,EAAasB,UAAW,QAASC,YAAa,SADhE,KAGKjB,GAEL,yBAAKkB,UAAU,UACb,4BACEA,UAAU,MACVP,MAAO,CAAEC,gBAAiBlB,GAC1ByB,QAASlC,GAHX,eAnBF,wBACE0B,MAAO,CACLS,SAAU,OACVN,MAAO,OACPE,UAAW,WAGb,kBAAC,IAAD,CAAiBK,KAAMC,QCzBhBC,EAPM,WACnB,OACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,QCgBSM,MAnBf,WACE,OACE,yBAAKN,UAAU,aACb,6BACE,kBAAC,EAAD,MACA,uBACEP,MAAO,CACLG,MAAO,QACPE,UAAW,SACXI,SAAU,SAJd,iBCGYK,QACW,cAA7BtC,OAAOC,SAASsC,UAEe,UAA7BvC,OAAOC,SAASsC,UAEhBvC,OAAOC,SAASsC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrB,SAASsB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.09e461ab.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./Quote.css\";\n\nconst refreshPage = () => {\n  setTimeout(() => {\n    window.location.reload(false);\n  }, 1000);\n};\nconst url = \"https://type.fit/api/quotes\";\nconst randomNum = Math.floor(Math.random() * 1500 + 1);\nconst randomColor = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n\nconst Quote = () => {\n  const [quote, setQuote] = useState(null);\n  const [author, setAuthor] = useState(null);\n  useEffect(() => {\n    const effect = async () => {\n      const res = await fetch(url);\n      const data = await res.json();\n      setQuote(data[randomNum].text);\n      setAuthor(data[randomNum].author);\n      document.body.style.backgroundColor = randomColor;\n    };\n    effect();\n  });\n  if (!quote || !author)\n    return (\n      <h1\n        style={{\n          fontSize: \"18px\",\n          color: \"grey\",\n          textAlign: \"center\",\n        }}\n      >\n        <FontAwesomeIcon icon={faQuoteLeft} />\n      </h1>\n    );\n  return (\n    <div>\n      <h1 style={{ color: randomColor, transition: \"ease-in\" }}>{quote}</h1>\n      <p\n        style={{ color: randomColor, textAlign: \"right\", paddingLeft: \"20px\" }}\n      >\n        ~ {author}\n      </p>\n      <div className=\"btnbox\">\n        <button\n          className=\"btn\"\n          style={{ backgroundColor: randomColor }}\n          onClick={refreshPage}\n        >\n          New Quote\n        </button>\n      </div>\n    </div>\n  );\n};\nexport default Quote;\n","import React from \"react\";\nimport \"./QuoteMachine.css\";\nimport Quote from \"./Quote\";\n\nconst QuoteMachine = () => {\n  return (\n    <div className=\"box\">\n      <Quote />\n    </div>\n  );\n};\nexport default QuoteMachine;\n","import React from \"react\";\nimport \"./App.css\";\nimport QuoteMachine from \"./components/QuoteMachine\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div>\n        <QuoteMachine />\n        <p\n          style={{\n            color: \"white\",\n            textAlign: \"center\",\n            fontSize: \"12px\",\n          }}\n        >\n          by harshad\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}